# ***** BEGIN GPL LICENSE BLOCK *****
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The Original Code is Copyright (C) 2021, TIALab, University of Warwick
# All rights reserved.
# ***** END GPL LICENSE BLOCK *****

"""This module enables patch-level prediction."""

import os

import torch

from tiatoolbox.models import abc as tia_model_abc

class ModelBase(tia_model_abc.ModelBase):
    """ABC.

    Attributes:
        num_classes (int): Number of classes output by the model.
        feat_extract (nn.Module): Backbone CNN model.
        pool (nn.Module): Type of pooling applied after feature extraction.
        classifier (nn.Module): Linear classifier module used to map the features
                                to the output.

    """

    def __init__(
        self,
    ):
        super().__init__()

    def set_preproc_func(self, func=None):
        """To set function for preprocessing.

        Set the `preproc_func` to this `func` if it is not None.
        Else the `preproc_func` is reset to return source image.

        `func` must behave in the following manner:

        >>> transformed_img = func(img)

        """
        # TODO: enforece TypeError like DataLayoyt
        self.preproc_func = func if func is not None else lambda x: x

    def get_preproc_func(self):
        """Get preprocessing function."""
        return self.preproc_func

    def set_postproc_func(self, func=None):
        """To set function for postprocessing.

        Set the `postproc_func` to this `func` if it is not None.
        Else the `preproc_func` is reset to return source image.

        `func` must behave in the following manner:

        >>> final_output_image = func(raw_prediction)

        """
        self.postproc_func = func if func is not None else lambda x: x

    def get_postproc_func(self):
        """Get preprocessing function."""
        return self.postproc_func

    @staticmethod
    def infer_batch(model, batch_data, on_gpu):
        """Run inference on an input batch. Contains logic for
        forward operation as well as i/o aggregation.

        Args:
            model (nn.Module): PyTorch defined model.
            # ! TODO: change this to object or sthg, as this only need
            # ! to be in the same API protocol as loader
            batch_data (ndarray): A batch of data generated by
                torch.utils.data.DataLoader.
            on_gpu (bool): Whether to run inference on a GPU.

        """
        raise NotImplementedError
