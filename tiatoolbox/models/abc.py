# ***** BEGIN GPL LICENSE BLOCK *****
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The Original Code is Copyright (C) 2021, TIALab, University of Warwick
# All rights reserved.
# ***** END GPL LICENSE BLOCK *****

"""Defines Abstract Base Class for Models defined in tiatoolbox."""
import torch.nn as nn
from abc import ABC, abstractmethod, abstractproperty, abstractstaticmethod


class IOConfigBase(ABC):
    """Define an abstract class for holding a predictor input output information.

    Enforcing such that following attributes must always be defined by the subclass.

    Attributes
        patch_size (tuple(height, width)): Define the size of input patch.
        input_resolutions (list): Define the resolution of each input, incase the
            predictor receives variable input. Must be in the same order as network
            input.
        units (dict): Define the resolution of each output, incase the
            predictor return variable output.Must be in the same order as network
            output.

    """

    @abstractproperty
    @abstractmethod
    def patch_size(self):
        raise NotImplementedError

    @abstractproperty
    @abstractmethod
    def input_resolutions(self):
        raise NotImplementedError

    @abstractproperty
    @abstractmethod
    def output_resolutions(self):
        raise NotImplementedError


class ModelBase(ABC, nn.Module):
    """Abstract base class for models used in tiatoolbox."""

    @abstractstaticmethod
    def infer_batch(model, batch_data, on_gpu):
        """Run inference on an input batch. Contains logic for
        forward operation as well as i/o aggregation.

        Args:
            model (nn.Module): PyTorch defined model.
            batch_data (ndarray): a batch of data generated by
                torch.utils.data.DataLoader.
            on_gpu (bool): Whether to run inference on a GPU.

        """
        raise NotImplementedError

    @abstractproperty
    @abstractstaticmethod
    def preproc(image):
        """Pre-processing function for this class of model.

        Expect to do:
        >>> transformed_img = func(img)

        """
        raise NotImplementedError

    @abstractproperty
    @abstractstaticmethod
    def postproc(image):
        """Post-processing function for this class of model.

        Expect to do:
        >>> transformed_img = func(img)

        """
        raise NotImplementedError

    @abstractmethod
    def forward(self):
        """Torch method, contain logic for layers defined in init."""
        raise NotImplementedError
