[tool.pytest.ini_options]
  collect_ignore = ["setup.py", "benchmark/"]

[tool.black]
  exclude = '''
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | docs
    | data
    | setup.py
  )/
  '''
  include = '\.pyi?$'
  line-length = 88
  target-version = ['py37', 'py38', 'py39', 'py310']


[tool.coverage.run]
  branch = true
  source = ['tiatoolbox']
  omit = ['tests/*', 'tiatoolbox/__main__.py', '*/utils/env_detection.py', 'tiatoolbox/typing.py']

[tool.coverage.report]
  exclude_lines = [
    'if self.debug:',
    'pragma: no cover',
    'raise NotImplementedError',
    'if __name__ == .__main__.:',
  ]
  ignore_errors = true
  omit = ['tests/*', 'tiatoolbox/__main__.py', '*/utils/env_detection.py', 'tiatoolbox/typing.py']

[build-system]
  requires = ["setuptools"]
  build-backend = "setuptools.build_meta"

[tool.distutils.bdist_wheel]
  universal = true

[tool.poetry]
name = "TIA Centre"
version = "1.5.0"
description = "test"
authors = ["TIA Centre <tialab@dcs.warwick.ac.uk>"]

[tool.poetry_bumpversion.file."tiatoolbox/__init__.py"]
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'


[[tool.poetry_bumpversion.replacements]]
files = ["setup.py"]
search = 'version="{current_version}"'
replace = 'version="{new_version}"'

[[tool.poetry_bumpversion.replacements]]
files = ["CITATION.cff"]
search = 'version: {current_version}  # TIAToolbox version'
replace = 'version: {new_version}  # TIAToolbox version'

[[tool.poetry_bumpversion.replacements]]
files = [".github/workflows/docker-publish.yml"]
search = 'TOOLBOX_VER: {current_version}'
replace = 'TOOLBOX_VER: {new_version}'

[tool.ruff]
select = [
  "A",     # flake8-builtins
  "B",     # flake8-bugbear
  "D",     # pydocstyle, need to enable for docstrings check.
  "E",     # pycodestyle - Error
  "F",     # pyflakes
  "G",     # flake8-logging-format
  "I",     # Isort
  "N",     # pep8-naming
  "S",     # flake8-bandit
  "W",     # pycodestyle - Warning
  "Q",     # flake8-quotes
  "C4",    # flake8-comprehensions
  "FA",    # flake8-future-annotations
  "EM",    # flake8-errmsg
  "PD",    # pandas-vet
  "PL",    # Pylint
  "PT",    # flake8-pytest-style
  "TD",    # flake8-todos
  "UP",    # pyupgrade
  "C90",   # mccabe
  "T10",   # flake8-debugger
  "T20",   # flake8-print
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "BLE",   # flake8-blind-except
  "COM",   # flake8-commas
  "DTZ",   # flake8-datetimez
  "ERA",   # eradicate
  "FBT",   # flake8-boolean-trap
  "FIX",   # flake8-fixme
  "FLY",   # flynt
  "ICN",   # flake8-import-conventions
  "INP",   # flake8-no-pep420
  "INT",   # flake8-gettext
  "ISC",   # flake8-implicit-str-concat
  "NPY",   # NumPy-specific rules
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PTH",   # flake8-use-pathlib
  "PYI",   # flake8-pyi
  "RET",   # flake8-return
  "RSE",   # flake8-raise
  "RUF",   # Ruff-specific rules
  "SLF",   # flake8-self
  "SIM",   # flake8-simplify
  "TID",   # flake8-tidy-imports
  "TCH",   # flake8-type-checking
  "TRY",   # tryceratops
  "YTT",   # flake8-2020
  "PERF",  # Perflint
  "SLOT",  # flake8-slots
  "ASYNC", # flake8-async
]
ignore = []
# Allow Ruff to discover `*.ipynb` files.
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".eggs",
    ".git",
    ".ruff_cache",
    ".svn",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "venv",
]

# Ignore `F401` (import violations) in all `__init__.py` files.
per-file-ignores = {"__init__.py" = ["F401"], "tests/*" = ["T201", "PGH001", "SLF001", "S101", "PLR2004"], "benchmarks/*" = ["T201", "INP001"], "pre-commit/*" = ["T201", "INP001"], "tiatoolbox/cli/*" = ["PLR0913"]}

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Minimum Python version 3.8.
target-version = "py38"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 14

# need to enable for docstrings check.
[tool.ruff.pydocstyle]
 # Use Google-style docstrings.
convention = "google"

[tool.ruff.pylint]
max-args = 10

[tool.mypy]
ignore_missing_imports = true
python_version = 3.8
